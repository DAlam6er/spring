<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
		xmlns:p="http://www.springframework.org/schema/p"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:util="http://www.springframework.org/schema/util"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util.xsd
        ">
        <!-- 
        	DriverManagerDataSource –    всегда возвращает новое соединение.
        	SingleConnectionDataSource – всегда возвращает одно и то же соединение. 
         -->

		<!--
		Для mysql v.5.0
		<property name="driverClassName"  value="com.mysql.jdbc.Driver" />
		Для mysql v.8.0
		<property name="driverClassName"  value="com.mysql.cj.jdbc.Driver" />
		-->

		<!-- Это осведомленный bean, при destroy он закроет соединение
		Это спринговый DataSource для работы с базой через JDBC
		-->
		<!--
        <bean id="webDataSource" 
        	class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			<property name="driverClassName"  value="com.mysql.cj.jdbc.Driver" />
			<property name="url" value="jdbc:mysql://localhost:3306/web" />
			<property name="username" value="root" />
			<property name="password" value="root" />
        </bean>
	-->
	<!-- Пул соединений - dbcp2(data base connection pulling)
	это не спринговая библиотека! Не является осведомлённой
	Для корректного закрытия соединения надо вызывать close при уничтожении
	-->
	<bean id="webDataSource"
		  class="org.apache.commons.dbcp2.BasicDataSource"
		  destroy-method="close">
		<!--
		<property name="driverClassName"  value="com.mysql.cj.jdbc.Driver" />
		-->
		<!-- ${jdbc.url} - упрощенный вариант SPeL -->
		<property name="driverClassName"  value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!--
	Указываем Spring, чтобы он инициализировал коллекцию Map
	данными из файла jdbc.properties
	-->
	<context:property-placeholder location="classpath:jdbc.properties"/>

	<!-- из артефакта spring-jdbc
	Шаблон доступа к данным - обеспечивает почти всю работу
	-->
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="webDataSource" />
	</bean>

	<!-- bean для собственой реализации репозитория
	Эта реализация использует спринговый jdbcTemplate
	здесь происходит инициализация свойства JdbcTemplate
	в public class JdbcCourseDAO implements CourseDAO
	-->
	<bean id="courseDAO"
		class="ru.specialist.dao.JdbcCourseDAO"
		autowire="byType"
		>
	<!--<property name="jdbcTemplate" ref="jdbcTemplate"/>-->
	</bean>

 </beans>